# Environment Configuration for Webapp with Live API
# ===================================================
# Copy this file to .env and fill in your actual values

# === DUAL AUTHENTICATION STRATEGY ===
# Vertex AI:        Enterprise features, backend services
# Google AI Studio: Live API with camera/microphone streaming

# === VERTEX AI AUTHENTICATION (Keep existing - for enterprise features) ===
GOOGLE_APPLICATION_CREDENTIALS=".secrets/gcp/generative-fashion-355408-new-key.json"
GOOGLE_CLOUD_PROJECT="generative-fashion-355408"
GOOGLE_CLOUD_LOCATION="us-central1"
GOOGLE_GENAI_USE_VERTEXAI="True"

# === GOOGLE AI STUDIO AUTHENTICATION (New - for Live API camera/microphone) ===
# Get your API key from: https://aistudio.google.com/apikey
GEMINI_API_KEY="your_api_key_here_starts_with_AIza"

# === APPLICATION SETTINGS ===
DEBUG="false"
PYTHONUNBUFFERED="1"
FLASK_APP="wsgi.py"
FLASK_ENV="development"

# === DATABASE CONFIGURATION ===
DATABASE_URL="postgresql://postgres:postgres@db:5432/webapp"

# === GOOGLE CLOUD STORAGE ===
GCS_BUCKET_NAME="cursor-test-llm-assets"

# === HYBRID ARCHITECTURE NOTES ===
# Use Vertex AI for:     Enterprise features, text AI, function calling
# Use Google AI Studio:  Live API with camera/microphone streaming

# === GEMINI LIVE API AUTHENTICATION ===
# Option 1: Gemini Developer API (API Key from Google AI Studio)
# GEMINI_API_KEY=your-gemini-api-key-here

# Option 2: Vertex AI (Service Account Authentication - RECOMMENDED for Docker)
# Use this for production environments and when you already have GCP setup
GOOGLE_CLOUD_PROJECT=your-project-id-here
GOOGLE_CLOUD_LOCATION=us-central1

# Google Cloud Storage configuration
GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-key.json 