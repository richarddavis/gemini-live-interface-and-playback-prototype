services:
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      backend:
        condition: service_started
      frontend:
        condition: service_started
      oauth-server:
        condition: service_started

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    env_file:
      - .env  # Load environment variables from .env file (including REACT_APP_GEMINI_API_KEY)
    environment:
      - REACT_APP_API_URL=/api
      - REACT_APP_OAUTH_ISSUER=http://localhost/dex
      - REACT_APP_OAUTH_CLIENT_ID=chat-app-dev
    depends_on:
      backend:
        condition: service_started
      oauth-server:
        condition: service_started

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:5000"
    volumes:
      - ./backend:/app
      - ./.gcp-key.json:/app/gcp-key.json:ro
    env_file:
      - .env  # Load environment variables from .env file
    environment:
      - FLASK_APP=wsgi.py
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/webapp
      - OAUTH_ISSUER=http://oauth-server:5556
      - OAUTH_CLIENT_ID=chat-app-dev
      - OAUTH_CLIENT_SECRET=chat-app-dev-secret-12345
      - OAUTH_REDIRECT_URI=http://localhost/auth/callback
    depends_on:
      db:
        condition: service_healthy
      oauth-server:
        condition: service_started
    command: >
      sh -c '
        echo "Database is healthy. Applying database migrations..." &&
        flask db upgrade &&
        echo "Starting Gunicorn..." &&
        gunicorn --bind 0.0.0.0:5000 --workers 2 wsgi:app
      '

  db:
    image: postgres:15
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=webapp
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d webapp || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  oauth-server:
    image: dexidp/dex:v2.37.0
    ports:
      - "5556:5556"
    volumes:
      - ./auth-config/dex-config.yml:/etc/dex/config.yaml:ro
    env_file:
      - .env  # Load environment variables for GitHub OAuth
    command: ["dex", "serve", "/etc/dex/config.yaml"]
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5556/dex/.well-known/openid_configuration"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

volumes:
  postgres_data: 